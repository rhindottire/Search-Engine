@props(['article'])

<div id="tableOfContents" class="fixed right-6 top-1/2 transform -translate-y-1/2 z-40 hidden lg:block">
    <!-- TOC Toggle Button - Fixed Position -->
    <button id="tocToggle" onclick="toggleTOC()" 
            class="fixed right-6 top-1/2 transform -translate-y-1/2 w-12 h-12 bg-gradient-to-r from-[#303134] to-[#3c4043] hover:from-[#3c4043] hover:to-[#5f6368] text-[#8ab4f8] rounded-full border border-[#5f6368] hover:border-[#8ab4f8] transition-all duration-300 hover:scale-110 shadow-lg hover:shadow-xl hover:shadow-[#8ab4f8]/20 flex items-center justify-center group z-50">
        <svg class="w-5 h-5 group-hover:rotate-180 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
        </svg>
    </button>
    
    <!-- TOC Panel - Separate from button -->
    <div id="tocPanel" class="fixed right-20 top-1/2 transform -translate-y-1/2 w-80 max-h-96 bg-gradient-to-br from-[#303134] to-[#1a1a1a] rounded-xl border border-[#5f6368] shadow-2xl backdrop-blur-lg translate-x-full opacity-0 transition-all duration-500 ease-out overflow-hidden z-40">
        <!-- TOC Header -->
        <div class="p-4 border-b border-[#3c4043] bg-gradient-to-r from-[#4285f4]/10 to-[#8ab4f8]/10">
            <div class="flex items-center justify-between">
                <h3 class="text-[#e8eaed] font-semibold flex items-center gap-2">
                    <div class="w-2 h-2 bg-[#8ab4f8] rounded-full animate-pulse"></div>
                    Daftar Isi
                </h3>
                <button onclick="toggleTOC()" class="text-[#9aa0a6] hover:text-[#e8eaed] transition-colors">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
            </div>
        </div>
        
        <!-- TOC Content -->
        <div class="p-4 overflow-y-auto max-h-80 custom-scrollbar">
            <nav id="tocList" class="space-y-2">
                <!-- TOC items will be generated by JavaScript -->
            </nav>
        </div>
        
        <!-- TOC Footer -->
        <div class="p-3 border-t border-[#3c4043] bg-[#1a1a1a]/50">
            <div class="flex items-center justify-between text-xs text-[#9aa0a6]">
                <span>Tekan T untuk toggle</span>
                <div class="flex items-center gap-1">
                    <div class="w-1 h-1 bg-[#8ab4f8] rounded-full animate-ping"></div>
                    <span id="currentSection">Intro</span>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.custom-scrollbar::-webkit-scrollbar {
    width: 4px;
}

.custom-scrollbar::-webkit-scrollbar-track {
    background: #3c4043;
    border-radius: 2px;
}

.custom-scrollbar::-webkit-scrollbar-thumb {
    background: linear-gradient(to bottom, #8ab4f8, #4285f4);
    border-radius: 2px;
}

.custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(to bottom, #aecbfa, #8ab4f8);
}

.toc-item {
    position: relative;
    overflow: hidden;
}

.toc-item::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 3px;
    background: linear-gradient(to bottom, #4285f4, #8ab4f8);
    transform: scaleY(0);
    transition: transform 0.3s ease;
}

.toc-item.active::before {
    transform: scaleY(1);
}

.toc-item:hover::before {
    transform: scaleY(0.5);
}
</style>

<script>
let tocOpen = false;
let headings = [];
let currentActiveIndex = -1;

function generateTOC() {
    const content = document.querySelector('.article-content') || document.querySelector('main');
    if (!content) return;
    
    headings = content.querySelectorAll('h1, h2, h3, h4, h5, h6');
    const tocList = document.getElementById('tocList');
    
    if (headings.length === 0) {
        tocList.innerHTML = '<p class="text-[#9aa0a6] text-sm">Tidak ada heading ditemukan</p>';
        return;
    }
    
    let tocHTML = '';
    headings.forEach((heading, index) => {
        const level = parseInt(heading.tagName.charAt(1));
        const text = heading.textContent.trim();
        const id = `heading-${index}`;
        
        // Add ID to heading if it doesn't have one
        if (!heading.id) {
            heading.id = id;
        }
        
        const indent = (level - 1) * 12;
        const size = level <= 2 ? 'text-sm' : 'text-xs';
        const color = level <= 2 ? 'text-[#e8eaed]' : 'text-[#9aa0a6]';
        
        tocHTML += `
            <div class="toc-item">
                <a href="#${heading.id}" 
                   onclick="scrollToHeading('${heading.id}', ${index})"
                   class="block py-2 px-3 ${size} ${color} hover:text-[#8ab4f8] hover:bg-[#3c4043]/50 rounded-lg transition-all duration-300 hover:translate-x-2 hover:shadow-lg"
                   style="margin-left: ${indent}px"
                   data-index="${index}">
                    <div class="flex items-center gap-2">
                        <div class="w-1.5 h-1.5 bg-current rounded-full opacity-50"></div>
                        <span class="line-clamp-2">${text}</span>
                    </div>
                </a>
            </div>
        `;
    });
    
    tocList.innerHTML = tocHTML;
}

function toggleTOC() {
    const panel = document.getElementById('tocPanel');
    const toggle = document.getElementById('tocToggle');
    
    tocOpen = !tocOpen;
    
    if (tocOpen) {
        panel.style.transform = 'translateX(0) translateY(-50%)';
        panel.style.opacity = '1';
        toggle.style.transform = 'translateY(-50%) rotate(180deg)';
        generateTOC();
    } else {
        panel.style.transform = 'translateX(100%) translateY(-50%)';
        panel.style.opacity = '0';
        toggle.style.transform = 'translateY(-50%) rotate(0deg)';
    }
}

function scrollToHeading(id, index) {
    const element = document.getElementById(id);
    if (element) {
        element.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start',
            inline: 'nearest'
        });
        
        // Update active state
        updateActiveTOCItem(index);
        
        // Add highlight effect
        element.style.background = 'linear-gradient(90deg, rgba(138, 180, 248, 0.1), transparent)';
        element.style.borderLeft = '4px solid #8ab4f8';
        element.style.paddingLeft = '16px';
        element.style.transition = 'all 0.3s ease';
        
        setTimeout(() => {
            element.style.background = '';
            element.style.borderLeft = '';
            element.style.paddingLeft = '';
        }, 2000);
    }
}

function updateActiveTOCItem(index) {
    // Remove active class from all items
    document.querySelectorAll('.toc-item').forEach(item => {
        item.classList.remove('active');
    });
    
    // Add active class to current item
    const currentItem = document.querySelector(`[data-index="${index}"]`)?.closest('.toc-item');
    if (currentItem) {
        currentItem.classList.add('active');
        currentActiveIndex = index;
        
        // Update current section indicator
        const sectionName = headings[index]?.textContent.trim().substring(0, 20) + '...';
        document.getElementById('currentSection').textContent = sectionName;
    }
}

// Auto-update active TOC item based on scroll position
function updateTOCOnScroll() {
    if (!tocOpen || headings.length === 0) return;
    
    const scrollTop = window.pageYOffset;
    let activeIndex = -1;
    
    for (let i = headings.length - 1; i >= 0; i--) {
        const heading = headings[i];
        const rect = heading.getBoundingClientRect();
        
        if (rect.top <= 100) {
            activeIndex = i;
            break;
        }
    }
    
    if (activeIndex !== currentActiveIndex && activeIndex >= 0) {
        updateActiveTOCItem(activeIndex);
    }
}

// Keyboard shortcut
document.addEventListener('keydown', (e) => {
    if (e.key === 't' || e.key === 'T') {
        if (!e.ctrlKey && !e.altKey && !e.metaKey) {
            e.preventDefault();
            toggleTOC();
        }
    }
});

// Scroll listener
let tocScrollTicking = false;
window.addEventListener('scroll', () => {
    if (!tocScrollTicking) {
        requestAnimationFrame(() => {
            updateTOCOnScroll();
            tocScrollTicking = false;
        });
        tocScrollTicking = true;
    }
}, { passive: true });

// Initialize on page load
document.addEventListener('DOMContentLoaded', () => {
    setTimeout(generateTOC, 500);
});
</script>
